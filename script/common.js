"use strict";

function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(a, b) {
    for (var c, d = 0; d < b.length; d++) c = b[d], c.enumerable = c.enumerable || !1, c.configurable = !0, "value" in c && (c.writable = !0), Object.defineProperty(a, c.key, c)
}

function _createClass(a, b, c) {
    return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), a
}
var SCROLL = function () {
        function a(b) {
            var c, d = this;
            _classCallCheck(this, a), "string" == typeof b.el ? this.el = document.querySelector(b.el) : b.el instanceof HTMLElement && (this.el = b.el), this.top = null !== (c = b.top) && void 0 !== c ? c : this.el.offsetTop, this.el.style.position = "fixed", this.unit = b.unit, this.el.style.top = this.scrollNumber() + "px", window.addEventListener("scroll", function () {
                return d.scroll()
            }), window.addEventListener("resize", function () {
                return d.scroll()
            })
        }
        return _createClass(a, [{
            key: "scroll",
            value: function scroll() {
                this.window = this.scrollNumber(), this.el.style.top = 0 < this.window - pageYOffset ? this.window - pageYOffset + "px" : 0
            }
        }, {
            key: "scrollNumber",
            value: function scrollNumber() {
                return "px" == this.unit ? 0 <= this.top ? this.top : 0 : "%" == this.unit || null == this.unit ? this.calc(window.innerHeight, this.top) - this.el.clientHeight : void 0
            }
        }, {
            key: "calc",
            value: function calc(a, b) {
                return a * b / 100
            }
        }]), a
    }(),
    myScroll = new SCROLL({
        el: ".header__nav",
        unit: "px"
    }),
    burger = document.querySelector(".header__burger"),
    list = document.querySelector(".header__nav-list"),
    bg = document.querySelector(".bg");
burger.addEventListener("click", function () {
    list.classList.toggle("active"), burger.classList.toggle("active"), bg.classList.toggle("active"), document.body.style.overflow = "hidden", burger.classList.contains("active") || (document.body.style.overflow = "visible")
}), bg.addEventListener("click", function () {
    list.classList.remove("active"), burger.classList.remove("active"), bg.classList.remove("active"), document.body.style.overflow = "visible"
});
var previewBtn = document.querySelector(".preview__btn"),
    videoBg = document.querySelector(".video"),
    video = document.querySelector(".video__film"),
    videoClose = document.querySelector(".video__close"),
    volume = document.querySelector(".controls__volume"),
    videoCurrent = document.querySelector(".controls__current"),
    videoDuration = document.querySelector(".controls__duration"),
    videoProgress = document.querySelector(".controls__progress"),
    videoFill = document.querySelector(".controls__fill"),
    videoRuler = document.querySelector(".controls__ruler");
document.querySelector(".controls__play").onclick = videoPlay, document.querySelector(".controls__pause").onclick = videoPause, document.querySelector(".controls__stop").onclick = videoStop, document.querySelector(".controls__slow").onclick = speedDown, document.querySelector(".controls__normal").onclick = speedNormal, document.querySelector(".controls__fast").onclick = speedUp, previewBtn.addEventListener("click", function (a) {
    a.preventDefault(), videoBg.classList.add("active"), video.currentTime = 0, video.muted = !1, video.pause(), document.body.style.overflow = "hidden"
}), videoClose.addEventListener("click", function () {
    videoBg.classList.remove("active"), document.body.style.overflow = "visible", video.muted = !0, speedNormal()
}), document.body.addEventListener("keydown", function (a) {
    videoBg.classList.contains("active") && "27" == a.which && (videoBg.classList.remove("active"), video.muted = !0, document.body.style.overflowY = "visible")
}), document.body.addEventListener("keydown", function (a) {
    a.preventDefault(), videoBg.classList.contains("active") && "Space" == a.code && (video.paused ? videoPlay() : videoPause())
});
var cV = "controls__volume",
    cVS = "controls__volume-slash";
volume.addEventListener("click", function () {
    volume.classList.contains(cV) ? (video.muted = !0, volume.classList.remove(cV), volume.classList.add(cVS)) : (video.muted = !1, volume.classList.remove(cVS), volume.classList.add(cV))
}), video.ondblclick = function () {
    return video.paused ? video.play() : video.pause()
};
var addZero = function (a) {
        return 10 > a ? "0" + a : a
    },
    translateTime = function (a) {
        return "".concat(Math.trunc(a / 3600), ":").concat(addZero(Math.trunc(a / 60)), ":").concat(addZero(Math.trunc(a) % 60))
    },
    currentChangeTime = function () {
        return videoCurrent.innerHTML = translateTime(video.currentTime)
    };
video.ontimeupdate = function () {
    videoFill.style.width = "".concat(video.currentTime / (video.duration / 100), "%"), currentChangeTime()
}, videoProgress.addEventListener("click", function (a) {
    if (a.target != videoRuler) {
        videoFill.style.width = "".concat(a.offsetX, "px");
        var b = a.offsetX / videoProgress.clientWidth;
        video.currentTime = video.duration * b
    }
});

function videoPlay() {
    video.play(), videoDuration.innerHTML = translateTime(video.duration)
}

function videoPause() {
    video.pause()
}

function videoStop() {
    video.pause(), video.currentTime = 0
}

function speedDown() {
    video.play(), video.playbackRate = .5
}

function speedNormal() {
    video.play(), video.playbackRate = 1
}

function speedUp() {
    video.play(), video.playbackRate = 2
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,